{"version":3,"sources":["Components/Note.js","App.js","serviceWorker.js","index.js"],"names":["Note","react_default","a","createElement","className","onClick","this","props","deleteMethod","text","Comment","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleKeyPressValue","event","key","state","noteText","notes","_this2","map","val","Components_Note","deleteNote","addNote","bind","type","ref","input","textInput","value","onChange","updateNoteText","onKeyPress","console","log","push","focus","setState","target","index","notesArray","splice","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAaeA,mLATP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXC,QAASC,KAAKC,MAAMC,cACnBF,KAAKC,MAAME,yBALTC,UCgEJC,qBA7DX,SAAAA,EAAYJ,GAAM,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KA4CVW,oBAAsB,SAACC,GAClBA,EAAMC,KA5CPR,EAAKS,MAAM,CACTC,SAAS,GACTC,MAAO,IAJOX,wEAQZ,IAAAY,EAAAlB,KACFiB,EAAQjB,KAAKe,MAAME,MAAME,IAAI,SAACC,EAAKN,GACrC,OAAOnB,EAAAC,EAAAC,cAACwB,EAAD,CAAMP,IAAKA,EAAKX,KAAMiB,EACnBlB,aAAcgB,EAAKI,WAAWR,OAG1C,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,0BACCmB,EACDtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,QAASC,KAAKuB,QAAQC,KAAKxB,OAAhD,KACAL,EAAAC,EAAAC,cAAA,SAAO4B,KAAK,OACVC,IAAM,SAACC,GAAUT,EAAKU,UAAYD,GAClC7B,UAAY,YACZ+B,MAAS7B,KAAKe,MAAMC,SACpBc,SAAY,SAACd,GAAYE,EAAKa,eAAef,IAC7CgB,WAAYhC,KAAKY,oBAAoBY,KAAKxB,4CAOhDiC,QAAQC,IAAI,GACe,KAAxBlC,KAAKe,MAAMC,YACGhB,KAAKe,MAAME,MACjBkB,KAAKnC,KAAKe,MAAMC,UAC3BhB,KAAKe,MAAMC,SAAS,GACpBhB,KAAK4B,UAAUQ,gDAGFpB,GACbhB,KAAKqC,SAAS,CACZrB,SAAUA,EAASsB,OAAOT,2CAUnBU,GACT,IAAIC,EAAaxC,KAAKe,MAAME,MAC5BuB,EAAWC,OAAOF,EAAO,GACzBvC,KAAKqC,SAAS,CACZpB,MAAOuB,WAxDKE,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d842db4f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Note extends Comment{\r\n    render(){\r\n        return(\r\n            <div className=\"note\"\r\n                onClick={this.props.deleteMethod}>\r\n                {this.props.text}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Note;","import React, { Component } from 'react';\nimport Note from './Components/Note';\nimport './App.css';\n\nclass App extends Component{\n    constructor(props){\n      super(props);\n      this.state={\n        noteText:'',\n        notes: [],\n      }\n    }\n\n  render(){\n    let notes = this.state.notes.map((val, key) => {\n      return <Note key={key} text={val} \n                deleteMethod={this.deleteNote(key)} />\n    })\n\n    return(\n      <div className=\"container\">\n        <div className=\"header\">React ToDo Application</div>\n        {notes}\n        <div className=\"btn\" onClick={this.addNote.bind(this)}>+</div>\n        <input type=\"text\" \n          ref={((input) =>{this.textInput = input} )}\n          className = \"textInput\"\n          value = {this.state.noteText}\n          onChange = {(noteText)=>{this.updateNoteText(noteText)}}\n          onKeyPress={this.handleKeyPressValue.bind(this)} />\n          \n      </div>\n    );\n  }\n\n  addNote(){\n    console.log(1);\n    if(this.state.noteText === ''){return}\n    let notesArray = this.state.notes;\n    notesArray.push(this.state.noteText);\n    this.state.noteText='';\n    this.textInput.focus();\n  }\n\n  updateNoteText(noteText){\n    this.setState({\n      noteText: noteText.target.value\n    })\n  }\n\n  handleKeyPressValue = (event) => {\n    if(event.key === 'Enter'){\n      \n    }\n  }\n\n  deleteNote(index){\n    let notesArray = this.state.notes;\n    notesArray.splice(index, 1);\n    this.setState({\n      notes: notesArray\n    })\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}